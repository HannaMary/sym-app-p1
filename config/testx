aW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JwppbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCcKaW1wb3J0IHsgdXNlRm9ybSwgRm9ybVByb3ZpZGVyIH0gZnJvbSAncmVhY3QtaG9vay1mb3JtJwppbXBvcnQgTWF0ZXJpYWxJdGVtIGZyb20gJy4vTWF0ZXJpYWxJdGVtJwppbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20nCgpqZXN0Lm1vY2soJ3JlYWN0LWkxOG5leHQnLCAoKSA9PiAoewogIHVzZVRyYW5zbGF0aW9uOiAoKSA9PiAoewogICAgdDogKGtleSkgPT4ga2V5CiAgfSksCn0pKQoKY29uc3QgV3JhcHBlciA9ICh7IGNoaWxkcmVuIH0pID0+IHsKICBjb25zdCBtZXRob2RzID0gdXNlRm9ybSh7CiAgICBkZWZhdWx0VmFsdWVzOiB7CiAgICAgIGhhbmRsaW5nVW5pdHM6IHsKICAgICAgICAxOiB7CiAgICAgICAgICBtYXRlcmlhbHM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIHNlcmlhbE51bWJlcjogJycsCiAgICAgICAgICAgICAgcGFydE51bWJlcjogJycsCiAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICcnLAogICAgICAgICAgICAgIHdlaWdodDogJycsCiAgICAgICAgICAgICAgcXVhbnRpdHk6IDEsCiAgICAgICAgICAgIH0sCiAgICAgICAgICBdLAogICAgICAgIH0sCiAgICAgIH0sCiAgICB9LAogIH0pCiAgcmV0dXJuIDxGb3JtUHJvdmlkZXIgey4uLm1ldGhvZHN9PntjaGlsZHJlbn08L0Zvcm1Qcm92aWRlcj4KfQoKZGVzY3JpYmUoJ01hdGVyaWFsSXRlbScsICgpID0+IHsKICBjb25zdCBwcm9wcyA9IHsKICAgIHJlbW92ZU1hdGVyaWFsOiBqZXN0LmZuKChpbmRleCkgPT4gKCkgPT4gaW5kZXgpLAogICAgaW5kZXg6IDAsCiAgICBoYW5kbGluZ1VuaXRzSWQ6IDEsCiAgICB1cGRhdGVVVE1XZWlnaHRWYWx1ZTogamVzdC5mbigpLAogICAgdHlwZUhhbmRsaW5nVW5pdDogJ1VTTScsCiAgICBlcnJvcnM6IHt9LAogIH0KCiAgaXQoJ2FjY2VwdHMgbnVtYmVyIGlucHV0IGZvciB3ZWlnaHQgZmllbGQgYW5kIGNhbGxzIHVwZGF0ZVVUTVdlaWdodFZhbHVlIG9uIGJsdXInLCAoKSA9PiB7CiAgICByZW5kZXIoCiAgICAgIDxXcmFwcGVyPgogICAgICAgIDxNYXRlcmlhbEl0ZW0gey4uLnByb3BzfSByZWdpc3Rlcj17amVzdC5mbigpfSAvPgogICAgICA8L1dyYXBwZXI+CiAgICApCgogICAgY29uc3Qgd2VpZ2h0SW5wdXQgPSBzY3JlZW4uZ2V0QnlMYWJlbFRleHQoL3RyYW5zcG9ydFJlcXVlc3QuaGFuZGxpbmdVbml0cy5tYXRlcmlhbC53ZWlnaHQvaSkKICAgIGZpcmVFdmVudC5jaGFuZ2Uod2VpZ2h0SW5wdXQsIHsgdGFyZ2V0OiB7IHZhbHVlOiAnNDInIH0gfSkKICAgIGZpcmVFdmVudC5ibHVyKHdlaWdodElucHV0KQoKICAgIGV4cGVjdCh3ZWlnaHRJbnB1dC52YWx1ZSkudG9CZSgnNDInKQogICAgZXhwZWN0KHByb3BzLnVwZGF0ZVVUTVdlaWdodFZhbHVlKS50b0hhdmVCZWVuQ2FsbGVkKCkKICB9KQp9KQo
